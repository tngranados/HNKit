// Generated by Create API
// https://github.com/kean/CreateAPI
//
// swiftlint:disable all

import Foundation

/// Stories, comments, jobs, Ask HNs and even polls are just items. They're identified by their ids, which are unique integers, and live under `/v0/item/<id>`.
public struct Item: Codable {
    /// The item's unique id.
    public var id: Int?
    /// True if the item is deleted.
    public var isDeleted: Bool?
    /// The type of item. One of "job", "story", "comment", "poll", or "pollopt".
    public var type: `Type`?
    /// The username of the item's author.
    public var by: String?
    /// Creation date of the item, in Unix Time.
    public var time: Int?
    /// The comment, story or poll text. HTML.
    public var text: String?
    /// True if the item is dead.
    public var isDead: Bool?
    /// The comment's parent, either another comment or the relevant story.
    public var parent: Int?
    /// The pollopt's associated poll.
    public var poll: Int?
    /// The ids of the item's comments, in ranked display order.
    public var kids: [Int]?
    /// The URL of the story.
    public var url: URL?
    /// The story's score, or the votes for a pollopt.
    public var score: Int?
    /// The title of the story, poll or job. HTML.
    public var title: String?
    /// A list of related pollopts, in display order.
    public var parts: [Int]?
    /// In the case of stories or polls, the total comment count.
    public var descendants: [Int]?

    /// The type of item. One of "job", "story", "comment", "poll", or "pollopt".
    public enum `Type`: String, Codable, CaseIterable {
        case job
        case story
        case comment
        case poll
        case pollopt
    }

    public init(id: Int? = nil, isDeleted: Bool? = nil, type: `Type`? = nil, by: String? = nil, time: Int? = nil, text: String? = nil, isDead: Bool? = nil, parent: Int? = nil, poll: Int? = nil, kids: [Int]? = nil, url: URL? = nil, score: Int? = nil, title: String? = nil, parts: [Int]? = nil, descendants: [Int]? = nil) {
        self.id = id
        self.isDeleted = isDeleted
        self.type = type
        self.by = by
        self.time = time
        self.text = text
        self.isDead = isDead
        self.parent = parent
        self.poll = poll
        self.kids = kids
        self.url = url
        self.score = score
        self.title = title
        self.parts = parts
        self.descendants = descendants
    }

    private enum CodingKeys: String, CodingKey {
        case id
        case isDeleted = "deleted"
        case type
        case by
        case time
        case text
        case isDead = "dead"
        case parent
        case poll
        case kids
        case url
        case score
        case title
        case parts
        case descendants
    }
}

/// Users are identified by case-sensitive ids, and live under `/v0/user/`. Only users that have public activity (comments or story submissions) on the site are available through the API.
public struct User: Codable {
    /// The user's unique username. Case-sensitive. Required.
    public var id: String?
    /// Creation date of the user, in Unix Time.
    public var created: Int?
    /// The user's karma.
    public var karma: Int?
    /// The user's optional self-description. HTML.
    public var about: String?
    /// List of the user's stories, polls and comments.
    public var submitted: [Int]?

    public init(id: String? = nil, created: Int? = nil, karma: Int? = nil, about: String? = nil, submitted: [Int]? = nil) {
        self.id = id
        self.created = created
        self.karma = karma
        self.about = about
        self.submitted = submitted
    }
}

struct StringCodingKey: CodingKey, ExpressibleByStringLiteral {
    private let string: String
    private var int: Int?

    var stringValue: String { return string }

    init(string: String) {
        self.string = string
    }

    init?(stringValue: String) {
        self.string = stringValue
    }

    var intValue: Int? { return int }

    init?(intValue: Int) {
        self.string = String(describing: intValue)
        self.int = intValue
    }

    init(stringLiteral value: String) {
        self.string = value
    }
}
